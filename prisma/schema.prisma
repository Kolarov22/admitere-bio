generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  courses   CourseEnrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Course {

  id          Int   @id @default(autoincrement())
  title       String
  description String
  image       String? @default("")
  price       Float
  users       CourseEnrollment[]
  quiz Quiz?

  createdAt   DateTime @default(now())



  @@map("courses")
}

model CourseEnrollment {
  userId   String
  courseId Int

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
  @@map("course_enrollments")
}


model Quiz {
  id          Int   @id @default(autoincrement())
  courseId    Int @unique
  questions   Question[]
  course      Course @relation(fields: [courseId], references: [id])

  @@map("quizzes")
}


model Question {
  id          Int   @id @default(autoincrement())
  quizId      Int
  question    String
  answers     String[]
  correctAnswer String
  explanation String
  quiz        Quiz @relation(fields: [quizId], references: [id])

  @@map("questions")
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}